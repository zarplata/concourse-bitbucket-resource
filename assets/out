#!/usr/bin/env bash
# vim: set ft=sh

set -e -o pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type=`jq -r '.source.bitbucket_type // "server"' < ${payload}`
base_url=`jq -r '.source.base_url // ""' < ${payload}`
username=`jq -r '.source.username // ""' < ${payload}`
password=`jq -r '.source.password // ""' < ${payload}`
project=`jq -r '.source.project // ""' < ${payload}`
repository=`jq -r '.source.repository // ""' < ${payload}`
dir=`jq -r '.source.dir // ""' < ${payload}`
if [[ ! ${dir} ]]; then
    dir=$repository
fi
# params
build=`jq '.params' < ${payload}`

if [[ ! ${base_url} ]]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi

cd ${dir}

pr=`cat pull-request-info`
commit=`echo ${pr} | jq -r '.commit'`
build_url="${ATC_EXTERNAL_URL}/builds/${BUILD_ID}"

name=$(echo "$build"| jq -r '.name')
desc=$(echo "$build"| jq -r '.description // ""')
json=`echo "${build}" | jq --arg build_url "${build_url}" --arg id "${BUILD_ID}" --arg name "$name" --arg desc "$desc" '{
    state: .state,
    key: ($name + "-" + $id),
    name: $name,
    url: $build_url,
    description: $desc
}'`

if [[ "$bitbucket_type" == "server" ]]; then
    url="${base_url}/rest/build-status/1.0/commits/${commit}"
elif [[ "$bitbucket_type" == "cloud" ]]; then
    url="${base_url}/api/2.0/repositories/${project}/${repository}/commit/${commit}/statuses/build"
fi

curl -sS --fail -u ${username}:${password} -H "Content-Type: application/json" -XPOST ${url} -d "${json}"

jq -n --argjson pr "${pr}" --argjson pr "${pr}" '{
    version: {
        id: $pr.id|tostring,
        branch: $pr.feature_branch,
        commit: $pr.commit
    }
}' >&3
